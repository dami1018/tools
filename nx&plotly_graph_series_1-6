# 完整程序1，不包含节点的大小和颜色
# 程序包的导入
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import plotly.offline as pyo
import chardet
# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path,sheet_name="Sheet1")
re = data[data['客户类型'] !='个人'].reset_index()
# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)
#建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    # print(edge,edge[0])
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)
#建立点对象，并赋值
#由于plotly在中文显示方面存在问题，所以先将中文转化为拼音，并建立拼音的索引，然后用拼音画图
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=10,
        colorbar=dict(
            thickness=15,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

replace = {}
for node in G.nodes:
    replace[node] = ''.join(lazy_pinyin(node))
for node in G.nodes():
    x, y = pos[node]
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    node_trace['text'] += (''.join(lazy_pinyin(node)),)
# 将节点周边信息导入节点图
for node, adjacencies in enumerate(G.adjacency()):
    node_trace['marker']['color'] += (len(adjacencies[1]),)
    node_info = '# of connections: ' + str(len(adjacencies[1]))
    node_trace['text'] += (node_info,)

# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>Network graph made with Python',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='https://plotly.com/python/network-graphs/'> https://plotly.com/python/network-graphs/</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))

# 存储并显示图表
file_name = 'cust.html'
pyo.plot(fig, filename=file_name)
# 将拼音内容替换为中文  
with open(f'C:\\Users\\1\\{file_name}', 'rb') as file:
    raw_data = file.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding']
with open(f'C:\\Users\\1\\{file_name}', 'r', encoding=encoding) as file:
    html_content = file.read()
for node in G.nodes:
    old_string = replace[node]  # 要替换的旧字符串
    new_string = node  # 替换后的新字符串
    html_content = html_content.replace(old_string, new_string)


    
with open(f'C:\\Users\\1\\{file_name}', 'w', encoding='utf-8') as file:
    file.write(html_content)


# 完整程序2，包含节点的大小和颜色
# 程序包的导入
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import plotly.offline as pyo
import chardet
import matplotlib.cm as cm
import matplotlib.colors as mcolors
# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path, sheet_name="Sheet1")
re = data[data['客户类型'] != '个人'].reset_index()

# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)

# 建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)
# 建立点对象，并赋值
# 由于plotly在中文显示方面存在问题，所以先将中文转化为拼音，并建立拼音的索引，然后用拼音画图
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=[],
        colorbar=dict(
            thickness=15,
            title='Node Region',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

replace = {}
for node in G.nodes:
    replace[node] = ''.join(lazy_pinyin(node))

# 根据 re 数据框中的 资产 和 分公司 字段设置节点的大小和颜色
node_sizes = []
node_colors = []
regions = re['分公司'].unique()
colormap = cm.get_cmap('viridis', len(regions))
region_color_map = {region: mcolors.rgb2hex(colormap(i)) for i, region in enumerate(regions)}
for node in G.nodes():
    if node in re['客户经理'].values:
        node_info = re[re['客户经理'] == node]
        node_sizes.append(10)
    else:
        node_info = re[re['客户名称'] == node]
        node_sizes.append(min(node_info['当前净资产(普通+信用)_万元'].values[0]/100,100))
    region = node_info['分公司'].values[0]
    node_colors.append(region_color_map[region])

for node in G.nodes():
    x, y = pos[node]
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    node_trace['text'] += (''.join(lazy_pinyin(node)),)
    node_trace['marker']['size'] += (node_sizes.pop(0),)
    node_trace['marker']['color'] += (node_colors.pop(0),)

# 将节点周边信息导入节点图,不需要节点周边的信息
'''
for node, adjacencies in enumerate(G.adjacency()):
    node_info = '# of connections: ' + str(len(adjacencies[1]))
    node_trace['text'] += (node_info,)
'''
# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>Network graph made with Python',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='https://plotly.com/python/network-graphs/'> https://plotly.com/python/network-graphs/</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    autosize=True,
                    template="plotly_white"))

# 存储并显示图表
file_name = 'cust_sr.html'
pyo.plot(fig, filename=file_name)

# 将拼音内容替换为中文
with open(f'C:\\Users\\1\\{file_name}', 'rb') as file:
    raw_data = file.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding']
with open(f'C:\\Users\\1\\{file_name}', 'r', encoding=encoding) as file:
    html_content = file.read()
for node in G.nodes:
    old_string = replace[node]  # 要替换的旧字符串
    new_string = node  # 替换后的新字符串
    html_content = html_content.replace(old_string, new_string)

zoom_script = """
<script>
    var plot = document.querySelector('div[data-plot-id]');
    plot.onwheel = function(event) {
        event.preventDefault();
        if (event.deltaY < 0) {
            plot.style.transform = 'scale(' + (parseFloat(plot.style.transform.slice(6, -1)) + 0.1) + ')';
        } else {
            plot.style.transform = 'scale(' + (parseFloat(plot.style.transform.slice(6, -1)) - 0.1) + ')';
        }
    };
</script>
"""

html_content = html_content.replace('</body>', zoom_script + '</body>')


with open(f'C:\\Users\\1\\{file_name}', 'w', encoding='utf-8') as file:
    file.write(html_content)


# 完整程序3，创建dash应用
from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import webbrowser
import time
# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path, sheet_name="Sheet1")
re = data[data['客户类型'] != '个人'].reset_index()

# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)

# 建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)

# 建立点对象，并赋值
# 由于plotly在中文显示方面存在问题，所以先将中文转化为拼音，并建立拼音的索引，然后用拼音画图
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=[],
        colorbar=dict(
            thickness=15,
            title='Node Region',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))


# 根据 re 数据框中的 资产 和 分公司 字段设置节点的大小和颜色
node_sizes = []
node_colors = []
regions = re['分公司'].unique()
colormap = cm.get_cmap('viridis', len(regions))
region_color_map = {region: mcolors.rgb2hex(colormap(i)) for i, region in enumerate(regions)}

for node in G.nodes():
    if node in re['客户经理'].values:
        node_info = re[re['客户经理'] == node]
        node_sizes.append(10)
    else:
        node_info = re[re['客户名称'] == node]
        node_sizes.append(min(node_info['当前净资产(普通+信用)_万元'].values[0] / 100, 100))
    region = node_info['分公司'].values[0]
    node_colors.append(region_color_map[region])

for node in G.nodes():
    x, y = pos[node]
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    # 跟我预想的一样，如果可以直接显示图，字体就不会出问题，只有存储之后再打开才会出字体的问题
    node_trace['text'] += (node,)
    node_trace['marker']['size'] += (node_sizes.pop(0),)
    node_trace['marker']['color'] += (node_colors.pop(0),)

# 将节点周边信息导入节点图,不需要节点周边的信息
'''
for node, adjacencies in enumerate(G.adjacency()):
    node_info = '# of connections: ' + str(len(adjacencies[1]))
    node_trace['text'] += (node_info,)
'''

# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>Network graph made with Python',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='https://plotly.com/python/network-graphs/'> https://plotly.com/python/network-graphs/</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    autosize=True,
                    template="plotly_white"
                ))

# 创建 Dash 应用程序
app = Dash(__name__)

app.layout = html.Div([
    dcc.Graph(id='network-graph', figure=fig, style={'width': '90vw', 'height': '90vh'}),
    html.Div([
        dcc.Input(id='search-input', type='text', placeholder='Search...'),
        html.Div(id='search-output')
    ])
])

@app.callback(
    Output('search-output', 'children'),
    [Input('search-input', 'value')]
)
def search_nodes(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        if matching_nodes:
            return f"Matching nodes: {', '.join(matching_nodes)}"
        else:
            return "No matching nodes found."
    return ""
# 一步到位的做法
'''
@app.callback(
    Output('network-graph', 'figure'),
    [Input('search-input', 'value')]
)
def update_graph(search_value):
    le = 0.1
    if search_value:
        search_value = search_value.strip()
        if search_value in G.nodes:
            node = search_value
            x, y = pos[node]
            fig.update_layout(
                xaxis=dict(range=[x - le, x + le]),
                yaxis=dict(range=[y - le, y + le])
            )
            # 闪烁节点
            for i in range(5):
                fig.update_traces(marker_size=15, selector=dict(name=node))
                time.sleep(0.5)
                fig.update_traces(marker_size=10, selector=dict(name=node))
                time.sleep(0.5)
    return fig
'''
# 动画比较光滑的过渡，效果并不是很好
@app.callback(
    Output('network-graph', 'figure'),
    [Input('search-input', 'value')]
)
def update_graph(search_value):
    le = 0.1
    step = 1
    if search_value:
        search_value = search_value.strip()
        if search_value in G.nodes:
            node = search_value
            x, y = pos[node]
            # 创建动画帧
            frames = []
            for i in range(11):
                x_range = [x - le - step * (10-i) , x + le + step * (10-i)]
                y_range = [y - le - step * (10-i), y + le + step * (10-i)]
                frame = go.Frame(layout=go.Layout(
                    xaxis=dict(range=x_range),
                    yaxis=dict(range=y_range)
                ))
                frames.append(frame)
            # 更新图表布局和动画帧
            fig.update_layout(
                xaxis=dict(range=[x - le, x + le]),
                yaxis=dict(range=[y - le, y + le]),
                updatemenus=[dict(
                    type="buttons",
                    buttons=[dict(label="Play", method="animate", args=[None])]
                )],
                sliders=[dict(
                    active=0,
                    steps=[dict(method="animate", args=[["frame{}".format(k)], dict(mode="immediate")]) for k in range(11)]
                )]
            )
            fig.frames = frames
            # 闪烁节点
            '''
            for i in range(5):
                fig.update_traces(marker_size=15, selector=dict(name=node))
                time.sleep(0.5)
                fig.update_traces(marker_size=10, selector=dict(name=node))
                time.sleep(0.5)
            '''
    return fig
if __name__ == '__main__':
    webbrowser.open('http://127.0.0.1:8050/')
    app.run_server(debug=True)

# 节点实验
search_value = '摩旗'
if search_value in G.nodes:
    print(search_value)
    node = search_value
    x, y = pos[node]
for node in G.nodes:
    if search_value in node:
        print(node)
        
        
# 完整程序4，创建dash应用，新添加功能：展示所有匹配的节点，选择节点并且显示节点图

from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import webbrowser
import time

# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path, sheet_name="Sheet1")
re = data[data['客户类型'] != '个人'].reset_index()

# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)

# 建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)

# 建立点对象，并赋值
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    hovertext=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=[],
        colorbar=dict(
            thickness=15,
            title='Node Region',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

# 根据 re 数据框中的 资产 和 分公司 字段设置节点的大小和颜色
node_sizes = []
node_colors = []
regions = re['分公司'].unique()
colormap = cm.get_cmap('viridis', len(regions))
region_color_map = {region: mcolors.rgb2hex(colormap(i)) for i, region in enumerate(regions)}

for node in G.nodes():
    if node in re['客户经理'].values:
        node_info = re[re['客户经理'] == node]
        node_sizes.append(10)
    else:
        node_info = re[re['客户名称'] == node]
        node_sizes.append(min(node_info['当前净资产(普通+信用)_万元'].values[0] / 100, 100))
    region = node_info['分公司'].values[0]
    node_colors.append(region_color_map[region])

for node in G.nodes():
    x, y = pos[node]
    
    if node in re['客户经理'].values:
        node_info = re[re['客户经理']==node]
        node_text = f"{node}<br>工号: {node_info['客户经理工号'].values[0]}<br>分公司: {node_info['分公司'].values[0]}"
    if node in re['客户名称'].values:
        node_info = re[re['客户名称']==node]
        node_text = f"{node}<br>资产: {node_info['当前净资产(普通+信用)_万元'].values[0]}<br>分公司: {node_info['分公司'].values[0]}" 
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    node_trace['text'] += (node,)
    node_trace['hovertext'] += (node_text,) 
    node_trace['marker']['size'] += (node_sizes.pop(0),)
    node_trace['marker']['color'] += (node_colors.pop(0),)

# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>机构数据可视化交互系统',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='Security Lending'> Security Lending</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    autosize=True,
                    template="plotly_white"
                ))

# 创建 Dash 应用程序
app = Dash(__name__)

app.layout = html.Div([
    dcc.Graph(id='network-graph', figure=fig, style={'width': '90vw', 'height': '90vh'}),
    html.Div([
        dcc.Input(id='search-input', type='text', placeholder='Search...'),
        dcc.Dropdown(id='node-dropdown', placeholder='Select a node',style={'width': '200px'}),
        html.Div(id='search-output')
    ])
])

@app.callback(
    Output('search-output', 'children'),
    [Input('search-input', 'value')]
)
def search_nodes(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        if matching_nodes:
            return f"相关信息: {', '.join(matching_nodes)}"
        else:
            return "No matching nodes found."
    return ""

@app.callback(
    Output('node-dropdown', 'options'),
    [Input('search-input', 'value')]
)
def update_dropdown(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        return [{'label': node, 'value': node} for node in matching_nodes]
    return []

@app.callback(
    Output('network-graph', 'figure'),
    [Input('node-dropdown', 'value'), Input('network-graph', 'clickData')],
    [State('network-graph', 'figure')]
)
def update_graph(selected_node, click_data, current_fig):
    le = 0.1
    step = 1
    ctx = dash.callback_context
    if not ctx.triggered:
        return current_fig
    else:
        trigger = ctx.triggered[0]['prop_id'].split('.')[0]
    
    if trigger == 'node-dropdown' and selected_node:
        node = selected_node
    elif trigger == 'network-graph' and click_data:
        node = click_data['points'][0]['text']
    else:
        return current_fig

    x, y = pos[node]
    # 创建动画帧
    frames = []
    for i in range(11):
        x_range = [x - le - step * (10-i) , x + le + step * (10-i)]
        y_range = [y - le - step * (10-i), y + le + step * (10-i)]
        frame = go.Frame(layout=go.Layout(
            xaxis=dict(range=x_range),
            yaxis=dict(range=y_range)
        ))
        frames.append(frame)
    # 更新图表布局和动画帧
    fig.update_layout(
        xaxis=dict(range=[x - le, x + le]),
        yaxis=dict(range=[y - le, y + le]),
        updatemenus=[dict(
            type="buttons",
            buttons=[dict(label="Play", method="animate", args=[None])]
        )],
        sliders=[dict(
            active=0,
            steps=[dict(method="animate", args=[["frame{}".format(k)], dict(mode="immediate")]) for k in range(11)]
        )]
    )
    fig.frames = frames
    return fig

if __name__ == '__main__':
    webbrowser.open('http://127.0.0.1:8050/')
    app.run_server(debug=True)
# 信息测试
search_value = '盘京'
search_value = search_value.strip()
matching_records = re[re.apply(lambda row: search_value in row.values, axis=1)]
matching_records = re[re.apply(lambda row: any(search_value in str(cell) for cell in row), axis=1)]

# 完整程序五：增加表格内容
from dash import Dash, dcc, html, dash_table
from dash.dependencies import Input, Output, State
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import webbrowser
import time

# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path, sheet_name="Sheet1")
re = data[data['客户类型'] != '个人'].reset_index()

# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)

# 建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)

# 建立点对象，并赋值
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    hovertext=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=[],
        colorbar=dict(
            thickness=15,
            title='分公司',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

# 根据 re 数据框中的 资产 和 分公司 字段设置节点的大小和颜色
node_sizes = []
node_colors = []
regions = re['分公司'].unique()
colormap = cm.get_cmap('viridis', len(regions))
region_color_map = {region: mcolors.rgb2hex(colormap(i)) for i, region in enumerate(regions)}

for node in G.nodes():
    if node in re['客户经理'].values:
        node_info = re[re['客户经理'] == node]
        node_sizes.append(10)
    else:
        node_info = re[re['客户名称'] == node]
        node_sizes.append(min(node_info['当前净资产(普通+信用)_万元'].values[0] / 100, 100))
    region = node_info['分公司'].values[0]
    node_colors.append(region_color_map[region])

for node in G.nodes():
    x, y = pos[node]
    
    if node in re['客户经理'].values:
        node_info = re[re['客户经理']==node]
        node_text = f"{node}<br>工号: {node_info['客户经理工号'].values[0]}<br>分公司: {node_info['分公司'].values[0]}"
    if node in re['客户名称'].values:
        node_info = re[re['客户名称']==node]
        node_text = f"{node}<br>资产: {node_info['当前净资产(普通+信用)_万元'].values[0]}<br>分公司: {node_info['分公司'].values[0]}" 
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    node_trace['text'] += (node,)
    node_trace['hovertext'] += (node_text,) 
    node_trace['marker']['size'] += (node_sizes.pop(0),)
    node_trace['marker']['color'] += (node_colors.pop(0),)

# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>证金业务可视化交互系统',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='Security Lending'> Security Lending Desk</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    autosize=True,
                    template="plotly_white"
                ))

# 创建 Dash 应用程序
app = Dash(__name__)

app.layout = html.Div([
    dcc.Graph(id='network-graph', figure=fig, style={'width': '90vw', 'height': '90vh'}),
    html.Div([
        dcc.Input(id='search-input', type='text', placeholder='请输入搜索内容'),
        dcc.Dropdown(id='node-dropdown', placeholder='请选择', style={'width': '200px'}),
        html.Div(id='search-output'),
        dash_table.DataTable(id='search-results', columns=[{"name": i, "id": i} for i in re.columns], style_table={'overflowX': 'auto'})
    ])
])

@app.callback(
    Output('search-output', 'children'),
    [Input('search-input', 'value')]
)
def search_nodes(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        if matching_nodes:
            return f"相关信息: {', '.join(matching_nodes)}"
        else:
            return "No matching nodes found."
    return ""

@app.callback(
    Output('node-dropdown', 'options'),
    [Input('search-input', 'value')]
)
def update_dropdown(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        return [{'label': node, 'value': node} for node in matching_nodes]
    return []

@app.callback(
    Output('search-results', 'data'),
    [Input('search-input', 'value')]
)
def update_search_results(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_records = re[re.apply(lambda row: any(search_value in str(cell) for cell in row), axis=1)]
        return matching_records.to_dict('records')
    return []

@app.callback(
    Output('network-graph', 'figure'),
    [Input('node-dropdown', 'value'), Input('network-graph', 'clickData')],
    [State('network-graph', 'figure')]
)
def update_graph(selected_node, click_data, current_fig):
    le = 0.1
    step = 1
    ctx = dash.callback_context
    if not ctx.triggered:
        return current_fig
    else:
        trigger = ctx.triggered[0]['prop_id'].split('.')[0]
    
    if trigger == 'node-dropdown' and selected_node:
        node = selected_node
    elif trigger == 'network-graph' and click_data:
        node = click_data['points'][0]['text']
    else:
        return current_fig

    x, y = pos[node]
    # 创建动画帧
    frames = []
    for i in range(11):
        x_range = [x - le - step * (10-i) , x + le + step * (10-i)]
        y_range = [y - le - step * (10-i), y + le + step * (10-i)]
        frame = go.Frame(layout=go.Layout(
            xaxis=dict(range=x_range),
            yaxis=dict(range=y_range)
        ))
        frames.append(frame)
    # 更新图表布局和动画帧
    fig.update_layout(
        xaxis=dict(range=[x - le, x + le]),
        yaxis=dict(range=[y - le, y + le]),
        updatemenus=[dict(
            type="buttons",
            buttons=[dict(label="Play", method="animate", args=[None])]
        )],
        sliders=[dict(
            active=0,
            steps=[dict(method="animate", args=[["frame{}".format(k)], dict(mode="immediate")]) for k in range(11)]
        )]
    )
    fig.frames = frames
    return fig

if __name__ == '__main__':
    webbrowser.open('http://127.0.0.1:8050/')
    app.run_server(debug=True)



# 完整程序六：增加鼠标滚轮功能,功能终于实现了
from dash import Dash, dcc, html, dash_table
from dash.dependencies import Input, Output, State
import networkx as nx
import pandas as pd
from pypinyin import pinyin, lazy_pinyin
import plotly.graph_objs as go
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import webbrowser
import time

# 数据导入和处理
path = r"D:\python\custom.xlsx"
data = pd.read_excel(path, sheet_name="Sheet1")
re = data[data['客户类型'] != '个人'].reset_index()

# 图建立
G = nx.Graph()
for index, row in re.iterrows():
    G.add_edge(row['客户经理'], row['客户名称'])
pos = nx.spring_layout(G)

# 建立边的对象，并赋值
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_trace['x'] += (x0, x1, None)
    edge_trace['y'] += (y0, y1, None)

# 建立点对象，并赋值
node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    hovertext=[],
    mode='markers+text',  # 添加 'text' 模式
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=[],
        colorbar=dict(
            thickness=15,
            title='分公司',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

# 根据 re 数据框中的 资产 和 分公司 字段设置节点的大小和颜色
node_sizes = []
node_colors = []
regions = re['分公司'].unique()
colormap = cm.get_cmap('viridis', len(regions))
region_color_map = {region: mcolors.rgb2hex(colormap(i)) for i, region in enumerate(regions)}

for node in G.nodes():
    if node in re['客户经理'].values:
        node_info = re[re['客户经理'] == node]
        node_sizes.append(10)
    else:
        node_info = re[re['客户名称'] == node]
        node_sizes.append(min(node_info['当前净资产(普通+信用)_万元'].values[0] / 100, 100))
    region = node_info['分公司'].values[0]
    node_colors.append(region_color_map[region])

for node in G.nodes():
    x, y = pos[node]
    
    if node in re['客户经理'].values:
        node_info = re[re['客户经理']==node]
        node_text = f"{node}<br>工号: {node_info['客户经理工号'].values[0]}<br>分公司: {node_info['分公司'].values[0]}"
    if node in re['客户名称'].values:
        node_info = re[re['客户名称']==node]
        node_text = f"{node}<br>资产: {node_info['当前净资产(普通+信用)_万元'].values[0]}<br>分公司: {node_info['分公司'].values[0]}" 
    node_trace['x'] += (x,)
    node_trace['y'] += (y,)
    node_trace['text'] += (node,)
    node_trace['hovertext'] += (node_text,) 
    node_trace['marker']['size'] += (node_sizes.pop(0),)
    node_trace['marker']['color'] += (node_colors.pop(0),)

# 绘制图像
# 创建图表
fig = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='<br>证金业务可视化交互系统',
                    titlefont=dict(size=16),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        text="Python code: <a href='Security Lending'> Security Lending Desk</a>",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    autosize=True,
                    template="plotly_white"
                ))

# 创建 Dash 应用程序
app = Dash(__name__)

app.layout = html.Div([
    dcc.Graph(id='network-graph', figure=fig, style={'width': '90vw', 'height': '90vh'}),
    html.Div([
        dcc.Input(id='search-input', type='text', placeholder='请输入搜索内容'),
        dcc.Dropdown(id='node-dropdown', placeholder='请选择', style={'width': '200px'}),
        html.Div(id='search-output'),
        dash_table.DataTable(id='search-results', columns=[{"name": i, "id": i} for i in re.columns], style_table={'overflowX': 'auto'})
    ])
])

@app.callback(
    Output('search-output', 'children'),
    [Input('search-input', 'value')]
)
def search_nodes(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        if matching_nodes:
            return f"相关信息: {', '.join(matching_nodes)}"
        else:
            return "No matching nodes found."
    return ""

@app.callback(
    Output('node-dropdown', 'options'),
    [Input('search-input', 'value')]
)
def update_dropdown(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_nodes = [node for node in G.nodes if search_value in node]
        return [{'label': node, 'value': node} for node in matching_nodes]
    return []

@app.callback(
    Output('search-results', 'data'),
    [Input('search-input', 'value')]
)
def update_search_results(search_value):
    if search_value:
        search_value = search_value.strip()
        matching_records = re[re.apply(lambda row: any(search_value in str(cell) for cell in row), axis=1)]
        return matching_records.to_dict('records')
    return []

@app.callback(
    Output('network-graph', 'figure'),
    [Input('node-dropdown', 'value'), Input('network-graph', 'clickData')],
    [State('network-graph', 'figure')]
)
def update_graph(selected_node, click_data, current_fig):
    le = 0.1
    step = 1
    ctx = dash.callback_context
    if not ctx.triggered:
        return current_fig
    else:
        trigger = ctx.triggered[0]['prop_id'].split('.')[0]
    
    if trigger == 'node-dropdown' and selected_node:
        node = selected_node
    elif trigger == 'network-graph' and click_data:
        node = click_data['points'][0]['text']
    else:
        return current_fig

    x, y = pos[node]
    # 创建动画帧
    frames = []
    for i in range(11):
        x_range = [x - le - step * (10-i) , x + le + step * (10-i)]
        y_range = [y - le - step * (10-i), y + le + step * (10-i)]
        frame = go.Frame(layout=go.Layout(
            xaxis=dict(range=x_range),
            yaxis=dict(range=y_range)
        ))
        frames.append(frame)
    # 更新图表布局和动画帧
    fig.update_layout(
        xaxis=dict(range=[x - le, x + le]),
        yaxis=dict(range=[y - le, y + le]),
        updatemenus=[dict(
            type="buttons",
            buttons=[dict(label="Play", method="animate", args=[None])]
        )],
        sliders=[dict(
            active=0,
            steps=[dict(method="animate", args=[["frame{}".format(k)], dict(mode="immediate")]) for k in range(11)]
        )]
    )
    fig.frames = frames
    return fig

# 添加 JavaScript 代码以支持鼠标滚轮缩放
app.clientside_callback(
    """
    function(id) {
        setTimeout(function() {
            var plot = document.getElementById(id).querySelector('.js-plotly-plot');
            if (plot) {
                var zoomInButton = plot.querySelector('.modebar-btn[data-title="Zoom in"]');
                var zoomOutButton = plot.querySelector('.modebar-btn[data-title="Zoom out"]');

                plot.onwheel = function(event) {
                    event.preventDefault();
                    if (event.deltaY < 0) {
                        zoomInButton.click();
                    } else {
                        zoomOutButton.click();
                    }
                };
            }
        }, 100);
        return window.dash_clientside.no_update;
    }
    """,
    Output('network-graph', 'id'),
    [Input('network-graph', 'id')]
)

if __name__ == '__main__':
    webbrowser.open('http://127.0.0.1:8050/')
    app.run_server(debug=True)

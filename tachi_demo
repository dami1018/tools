# -*- coding: utf-8 -*-
"""
Created on Thu Oct  3 20:21:55 2024

@author: 1
"""

# 引用文献，说明这段代码的来源和一些作者信息
# Macklin, M. and Müller, M., 2013. Position based fluids. ACM Transactions on Graphics (TOG), 32(4), p.104.
# Taichi实现由叶矿（k-ye）编写
# 由Chunlei Li修改，改为3D版本，2022/7/4

# 引入所需的模块
import math
import numpy as np
import taichi as ti

# 初始化taichi
ti.init()

# 定义屏幕分辨率
screen_res = (800, 800)
# 定义屏幕与世界坐标的比例
screen_to_world_ratio = 20.0
# 定义边界，基于分辨率和比例
boundary = (screen_res[0] / screen_to_world_ratio,
            screen_res[1] / screen_to_world_ratio,
            screen_res[0] / screen_to_world_ratio,)
# 定义网格单元的大小
cell_size = 2.51
# 计算单元格的反比
cell_recpr = 1.0 / cell_size

# 定义一个向上取整的函数
def round_up(f, s):
    return (math.floor(f * cell_recpr / s) + 1) * s

# 计算网格大小
grid_size = (round_up(boundary[0], 1), round_up(boundary[1], 1), round_up(boundary[2], 1))

# 定义维度和颜色等参数
dim = 3  # 维度为3D
bg_color = 0x112f41  # 背景颜色
particle_color = 0x068587  # 粒子颜色
boundary_color = 0xebaca2  # 边界颜色
num_particles_x = 10  # 每个方向上的粒子数
num_particles = 10000  # 总粒子数
max_num_particles_per_cell = 100  # 每个单元格的最大粒子数
max_num_neighbors = 100  # 最大邻居数量
time_delta = 1.0 / 20.0  # 时间增量
epsilon = 1e-5  # 微小值，用于防止粒子重叠
particle_radius = 3.0  # 粒子半径
particle_radius_in_world = particle_radius / screen_to_world_ratio  # 实际世界中的粒子半径

# PBF参数
h = 1.1  # 平滑长度
mass = 1.0  # 粒子质量
rho0 = 1.0  # 参考密度
lambda_epsilon = 100.0  # 正则化参数
pbf_num_iters = 5  # PBF迭代次数
corr_deltaQ_coeff = 0.3  # 相关系数
corrK = 0.001  # 相关常量
neighbor_radius = h * 1.05  # 邻居半径

# 定义使用Taichi创建的字段(数据结构)
poly6_factor = 315.0 / 64.0 / math.pi  # Poly6核函数的常量
spiky_grad_factor = -45.0 / math.pi  # Spiky梯度的常量

# 定义粒子状态的字段
old_positions = ti.Vector.field(dim, float)  # 粒子旧位置
positions = ti.Vector.field(dim, float)  # 粒子当前位置,创建一个向量，维度为dim，数据类型为float
velocities = ti.Vector.field(dim, float)  # 粒子速度
grid_num_particles = ti.field(int)  # 每个网格中的粒子数量
particle_num_neighbors = ti.field(int)  # 每个粒子的邻居数量
particle_neighbors = ti.field(int)  # 每个粒子的邻居索引
lambdas = ti.field(float)  # 每个粒子的拉格朗日乘数
position_deltas = ti.Vector.field(dim, float)  # 位置增量

# 在Taichi的根节点密集地创建粒子的状态字段
ti.root.dense(ti.i, num_particles).place(old_positions, positions, velocities)
grid_snode = ti.root.dense(ti.ijk, grid_size)  # 创建网格节点
grid_snode.place(grid_num_particles)  # 放置网格中粒子的数量
grid2particles = ti.field(int, (grid_size + (max_num_particles_per_cell,)))  # 网格到粒子的映射
nb_node = ti.root.dense(ti.i, num_particles)  
nb_node.place(particle_num_neighbors)  # 存储每个粒子的邻居数量
nb_node.dense(ti.j, max_num_neighbors).place(particle_neighbors)  # 存储每个粒子的邻居索引
ti.root.dense(ti.i, num_particles).place(lambdas, position_deltas)  # 创建拉格朗日乘数和位置增量的存储

# 定义用于计算Poly6核函数的值的函数
@ti.func
def poly6_value(s, h):
    result = 0.0
    if 0 < s and s < h:
        x = (h * h - s * s) / (h * h * h)
        result = poly6_factor * x * x * x  # 计算结果
    return result  # 返回结果

# 定义计算Spiky梯度的函数
@ti.func
def spiky_gradient(r, h):
    result = ti.Vector([0.0, 0.0, 0.0])  # 初始化结果
    r_len = r.norm()  # 计算向量的长度
    if 0 < r_len and r_len < h:
        x = (h - r_len) / (h * h * h)
        g_factor = spiky_grad_factor * x * x  # 计算梯度因子
        result = r * g_factor / r_len  # 计算结果
    return result

# 计算相关的函数
@ti.func
def compute_scorr(pos_ji):
    # Eq (13)
    x = poly6_value(pos_ji.norm(), h) / poly6_value(corr_deltaQ_coeff * h, h)
    # pow(x, 4)
    x = x * x
    x = x * x
    return (-corrK) * x  # 返回结果

# 获取粒子所在的网格单元
@ti.func
def get_cell(pos):
    return int(pos * cell_recpr)  # 返回网格索引

# 判断网格单元是否在边界内
@ti.func
def is_in_grid(c):
    return 0 <= c[0] and c[0] < grid_size[0] and 0 <= c[1] and c[
        1] < grid_size[1] and c[2] >= 0 and c[2] < grid_size[2] 

# 将粒子位置限制在边界内
@ti.func
def confine_position_to_boundary(p):
    bmin = particle_radius_in_world  # 最小边界
    bmax = ti.Vector([boundary[0], boundary[1], boundary[2]]) - particle_radius_in_world  # 最大边界
    for i in ti.static(range(dim)):#static程序优化的一种方式
        # 使用随机性防止粒子在限制后相互粘连
        if p[i] <= bmin:
            p[i] = bmin + epsilon * ti.random()  # 把粒子推到边界外
        elif bmax[i] <= p[i]:
            p[i] = bmax[i] - epsilon * ti.random()  # 把粒子推到边界内
    return p  # 返回经过限制的粒子位置

# 进行每一帧的前序处理
@ti.kernel
def prologue():
    # 保存旧位置
    for i in positions:
        old_positions[i] = positions[i]
    # 在边界内施加重力
    for i in positions:
        g = ti.Vector([0.0, -10.0, 0.0])  # 重力向量
        pos, vel = positions[i], velocities[i]
        vel += g * time_delta  # 更新速度
        pos += vel * time_delta  # 更新位置
        positions[i] = confine_position_to_boundary(pos)  # 限制位置

    # 清空邻居查找表
    for I in ti.grouped(grid_num_particles):
        grid_num_particles[I] = 0
    for I in ti.grouped(particle_neighbors):
        particle_neighbors[I] = -1

    # 更新网格
    for p_i in positions:
        cell = get_cell(positions[p_i])  # 获取粒子当前网格
        offs = ti.atomic_add(grid_num_particles[cell], 1)  # 原子操作更新粒子数量
        grid2particles[cell, offs] = p_i  # 将粒子索引放入网格
    # 查找粒子邻居
    for p_i in positions:
        pos_i = positions[p_i]  # 当前粒子位置
        cell = get_cell(pos_i)  # 获取当前粒子网格
        nb_i = 0  # 近邻计数
        for offs in ti.static(ti.grouped(ti.ndrange((-1, 2), (-1, 2),(-1, 2)))):
            cell_to_check = cell + offs  # 检查的相邻单元格
            if is_in_grid(cell_to_check):  # 检查单元格是否在网格内
                for j in range(grid_num_particles[cell_to_check]):  # 检索该单元格中的所有粒子
                    p_j = grid2particles[cell_to_check, j]  # 获取粒子索引
                    if nb_i < max_num_neighbors and p_j != p_i and (
                            pos_i - positions[p_j]).norm() < neighbor_radius:  # 判断是否为邻居
                        particle_neighbors[p_i, nb_i] = p_j  # 记录邻居
                        nb_i += 1  # 计数增加
        particle_num_neighbors[p_i] = nb_i  # 更新邻居数量

# 每个时间步骤的子步骤计算
@ti.kernel
def substep():
    # 计算拉格朗日乘数
    # Eq (8) ~ (11)
    for p_i in positions:
        pos_i = positions[p_i]  # 当前粒子位置

        grad_i = ti.Vector([0.0, 0.0, 0.0])  # 初始化梯度
        sum_gradient_sqr = 0.0  # 初始化梯度平方和
        density_constraint = 0.0  # 初始化密度约束

        for j in range(particle_num_neighbors[p_i]):  # 遍历邻居
            p_j = particle_neighbors[p_i, j]  # 获取邻居粒子
            if p_j < 0:  # 边界检查
                break
            pos_ji = pos_i - positions[p_j]  # 计算粒子之间的位置差
            grad_j = spiky_gradient(pos_ji, h)  # 计算邻居梯度
            grad_i += grad_j  # 累加梯度
            sum_gradient_sqr += grad_j.dot(grad_j)  # 累加梯度平方和
            # Eq(2)
            density_constraint += poly6_value(pos_ji.norm(), h)  # 更新密度约束

        # Eq(1)
        density_constraint = (mass * density_constraint / rho0) - 1.0  # 更新密度约束

        sum_gradient_sqr += grad_i.dot(grad_i)  # 最终的梯度平方和更新
        lambdas[p_i] = (-density_constraint) / (sum_gradient_sqr + lambda_epsilon)  # 计算拉格朗日乘数
    # 计算位置增量
    # Eq(12), (14)
    for p_i in positions:
        pos_i = positions[p_i]  # 当前粒子位置
        lambda_i = lambdas[p_i]  # 获取粒子的拉格朗日乘数

        pos_delta_i = ti.Vector([0.0, 0.0, 0.0])  # 初始化位置增量
        for j in range(particle_num_neighbors[p_i]):  # 遍历邻居
            p_j = particle_neighbors[p_i, j]  # 获取邻居索引
            if p_j < 0:  # 边界检查
                break
            lambda_j = lambdas[p_j]  # 获取邻居的拉格朗日乘数
            pos_ji = pos_i - positions[p_j]  # 计算位置差
            scorr_ij = compute_scorr(pos_ji)  # 计算相关性
            pos_delta_i += (lambda_i + lambda_j + scorr_ij) * \
                spiky_gradient(pos_ji, h)  # 计算位置增量

        pos_delta_i /= rho0  # 归一化位置增量
        position_deltas[p_i] = pos_delta_i  # 保存位置增量
    # 应用位置增量
    for i in positions:
        positions[i] += position_deltas[i]  # 更新位置

# 进行收尾处理
@ti.kernel
def epilogue():
    # 限制粒子位置在边界内
    for i in positions:
        pos = positions[i]
        positions[i] = confine_position_to_boundary(pos)  # 更新粒子位置
    # 更新速度
    for i in positions:
        velocities[i] = (positions[i] - old_positions[i]) / time_delta  # 计算速度

# 运行PBF算法的主函数
def run_pbf():
    prologue()  # 前序处理
    for _ in range(pbf_num_iters):  # 循环迭代
        substep()  # 子算法步骤
    epilogue()  # 收尾处理

# 初始化粒子
@ti.kernel
def init():
    init_pos = ti.Vector([10.0,10.0,10.0])  # 初始化位置
    cube_size = 20  # 立方体大小
    spacing = 1  # 粒子间隔
    num_per_row = (int) (cube_size // spacing) + 1  # 每行粒子数量
    num_per_floor = num_per_row * num_per_row  # 每层粒子数量
    for i in range(num_particles):
        floor = i // (num_per_floor)  # 当前粒子所在楼层
        row = (i % num_per_floor) // num_per_row  # 当前粒子所在行
        col = (i % num_per_floor) % num_per_row  # 当前粒子所在列
        positions[i] = ti.Vector([col*spacing, floor*spacing, row*spacing]) + init_pos  # 设置粒子位置

# 进行坐标变换的函数
def T(a):
    if dim == 2:
        return a  # 如果是2D，则不变

    phi, theta = np.radians(28), np.radians(32)  # 设置旋转的角度

    a = a - 0.5  # 对坐标进行中心化
    x, y, z = a[:, 0], a[:, 1], a[:, 2]  # 分别取出x, y, z坐标
    c, s = np.cos(phi), np.sin(phi)  # 计算cos和sin
    C, S = np.cos(theta), np.sin(theta)  # 计算cos和sin
    x, z = x * c + z * s, z * c - x * s  # 进行坐标变换
    u, v = x, y * C + z * S  # 计算最终坐标
    return np.array([u, v]).swapaxes(0, 1) + 25  # 返回转换后的坐标

# 主程序
def main():
    init()  # 初始化粒子
    print(f'boundary={boundary} grid={grid_size} cell_size={cell_size}')  # 打印参数信息
    gui = ti.GUI('PBF3D', screen_res, background_color = 0xffffff)  # 创建GUI界面,screen_res是分辨率参数一般是（800,800）这种形式
    frame = 0  # 帧数初始化
    '''
    while gui.running and not gui.get_event(gui.ESCAPE): 是一个循环，它会持续运行，直到 GUI 界面关闭或用户按下 ESCAPE 键。具体来说：
    gui.running 是一个布尔值，用于检查 GUI 是否仍在运行。如果用户关闭了窗口，gui.running 会变为 False。
    gui.get_event(gui.ESCAPE) 用于检查是否发生了与 ESCAPE 键相关的事件。如果用户按下了 ESCAPE 键，该函数会返回相应的事件，使得 not gui.get_event(gui.ESCAPE) 为 False，从而终止循环。
    这个循环结构常用于游戏或实时应用程序中，以实时更新界面和处理用户输入。
    '''
    while gui.running and not gui.get_event(gui.ESCAPE):  # 窗口运行循环

        run_pbf()  # 执行PBF算法

        pos = positions.to_numpy()  # 获取粒子位置
        # 导出文件的代码
        # export_file = "PLY/pbf3d.ply"
        # if export_file:
            # writer = ti.tools.PLYWriter(num_vertices=num_particles)
            # writer.add_vertex_pos(pos[:, 0], pos[:, 1], pos[:, 2])  # 写入顶点位置
            # writer.export_frame(gui.frame, export_file)

        gui.circles(T(pos)/100.0, radius=3, color=0x66ccff)  # 在GUI中绘制粒子
        # gui.show(f'pic/res_{frame:06d}.png')  # 保存帧图像
        frame += 1  # 帧数递增
        gui.show()  # 更新显示
        # gui.show(f'pic/res_{frame:06d}.png')  # 保存帧图像

        # if frame == 201:
            # exit()  # 在200帧后退出

if __name__ == '__main__':
    main()  # 执行主程序



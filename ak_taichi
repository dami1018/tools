# -*- coding: utf-8 -*-
"""
Created on Sun Oct  6 10:25:04 2024

@author: 1
"""
# akshare是免费的也可以正常调用的
import akshare as ak
import numpy as np
import pandas as pd
stock_zh_a_hist_df = ak.stock_zh_a_hist(symbol="000001", period="daily", start_date="20170301", end_date='20231022', adjust="")
print(stock_zh_a_hist_df)
stock_trade = stock_zh_a_hist_df[['开盘','收盘']].to_numpy()
np.dot(stock_trade[:,0],stock_trade[:,1])
np.linalg.norm(stock_trade[:,0])
np.linalg.norm(stock_trade[:,1])
np.dot(stock_trade[:,0],stock_trade[:,1])/(np.linalg.norm(stock_trade[:,0])*np.linalg.norm(stock_trade[:,1]))

def cor(x1,x2):
    return np.dot(x1,x2)/(np.linalg.norm(x1)*np.linalg.norm(x2))
cor(stock_trade[:,0],stock_trade[:,1])


stock_info_a_code_name_df = ak.stock_info_a_code_name()
print(stock_info_a_code_name_df)

len(stock_info_a_code_name_df)
begt = "20240101"
endt = "20241001"

stock_ser = ak.stock_zh_a_hist(symbol="000001", period="daily", start_date=begt, end_date=endt, adjust="")

threshold = 1000
df_cor = pd.DataFrame()
a1 = ak.stock_zh_a_hist(symbol="000001", period="daily", start_date=begt, end_date=endt, adjust="")


for i in stock_info_a_code_name_df.index:
    if int(stock_info_a_code_name_df.loc[i,"code"])<=threshold:
        data = ak.stock_zh_a_hist(symbol=stock_info_a_code_name_df.loc[i,"code"], period="daily", start_date=begt, end_date=endt, adjust="")
        base = a1[a1['日期'].isin(data['日期'])]
        a = base['开盘'].to_numpy()
        try:
           ra = a[1:]/a[:-1] -1 
           rd = data['开盘'].to_numpy()[1:]/data['开盘'].to_numpy()[:-1] -1
           df_cor.loc[i,"stkcode"] = stock_info_a_code_name_df.loc[i,"code"] 
           df_cor.loc[i,"cor"] = cor(ra,rd)
           print(stock_info_a_code_name_df.loc[i,"code"],cor(ra,rd))
        except Exception as e:
            print(e,"存在停牌")
            df_cor.loc[i,"stkcode"] = stock_info_a_code_name_df.loc[i,"code"] 
            df_cor.loc[i,"cor"] = 0


df_cor.sort_values(by='cor',ascending=False).head(10)

# 



    
stock_ser = ak.stock_zh_a_hist(symbol="000007", period="daily", start_date=begt, end_date=endt, adjust="")
a1 = ak.stock_zh_a_hist(symbol="000001", period="daily", start_date=begt, end_date=endt, adjust="")
a7 = ak.stock_zh_a_hist(symbol="000007", period="daily", start_date=begt, end_date=endt, adjust="")

a1[a1['日期'].isin(a7['日期'])]


# 记录一百只股票的收益率的波动
begt = "20240101"
endt = "20241001"
thres = 100
stock_info_a_code_name_df = ak.stock_info_a_code_name()
df_rate = pd.DataFrame(columns=['日期','股票代码','收益率'])
df_sum = pd.DataFrame()
for i in stock_info_a_code_name_df.index:
    if i<=100 :
       data = ak.stock_zh_a_hist(symbol=stock_info_a_code_name_df.loc[i,"code"], period="daily", start_date=begt, end_date=endt, adjust="")
       data['累计涨跌幅'] = data['涨跌幅'].cumsum()
       # data['收益率'] = data['收盘价'].shift(-1)/data['收盘价'] 
       df_sum = pd.concat([df_sum,data],ignore_index=True)
# 随机生成100个点的坐标
import numpy as np
dim = 3
def T(a):
    if dim == 2:
        return a  # 如果是2D，则不变

    phi, theta = np.radians(28), np.radians(32)  # 设置旋转的角度

    a = a - 0.5  # 对坐标进行中心化
    x, y, z = a[:, 0], a[:, 1], a[:, 2]  # 分别取出x, y, z坐标
    c, s = np.cos(phi), np.sin(phi)  # 计算cos和sin
    C, S = np.cos(theta), np.sin(theta)  # 计算cos和sin
    x, z = x * c + z * s, z * c - x * s  # 进行坐标变换
    u, v = x, y * C + z * S  # 计算最终坐标
    return np.array([u, v]).swapaxes(0, 1) + 25  # 返回转换后的坐标
points = np.random.normal(loc=0, scale=1, size=(101, 2))
values = np.zeros((101,3))
values[:,:2] = points
df_sum.sort_values(by=['日期','股票代码'],ascending=[True,True],inplace=True)
df_sum['日期'] = df_sum['日期'].astype(str)
z = df_sum[df_sum['日期']=='2024-01-03']['涨跌幅'].to_numpy()
# df_sum[df_sum['股票代码']=='000413']
# print(df_sum.dtypes)
values[:,2] = z


import taichi as ti
screen_res = (800,600)
gui = ti.GUI('PBF3D', screen_res, background_color = 0xffffff)  # 创建GUI界面,screen_res是分辨率参数一般是（800,800）这种形式
while gui.running and not gui.get_event(gui.ESCAPE):  # 窗口运行循环
    gui.circles(T(values)/100.0, radius=30, color=0x66ccff)  # 在GUI中绘制粒子
    # gui.show(f'pic/res_{frame:06d}.png')  # 保存帧图像
    gui.show()  # 更新显示

# -*- coding: utf-8 -*-
"""
Created on Mon Sep 16 13:29:27 2024

@author: 1
"""

from pywinauto import Desktop
from pywinauto import Application
from pywinauto import findwindows
from io import StringIO
import sys
import pandas as pd
import pyautogui
import time
#采用findelements获取所有窗口，获得交易窗口的handle
# 1、初级版本
windows = findwindows.find_elements()
for window in windows:
    print(f"Window Title: {window.rich_text}, Handle: {window.handle}")
# 2、更详细的版本
# 打印窗口的关键信息
for window in windows:
    print(f"Handle: {window.handle}")
    print(f"Title: {window.rich_text}")
    print(f"Class Name: {window.class_name}")
    print(f"Process ID: {window.process_id}")
    print(f"Rectangle: {window.rectangle}")
    #print(f"Is Visible: {window.is_visible()}")
    #print(f"Is Enabled: {window.is_enabled()}")
    #print(f"Is Minimized: {window.is_minimized()}")
    #print(f"Is Maximized: {window.is_maximized()}")
    #print(f"Window Style: {window.style()}")
    
    # 如果需要，可以获取父窗口信息
    if window.parent:
        print(f"Parent Handle: {window.parent.handle}")
        print(f"Parent Title: {window.parent.rich_text}")

    print("=" * 40)    
# 根据handle值联结窗口，Handle: 334462，但是改了句柄之后就必须重新启动程序，否则窗口信息都是不准的
window_zxjt = Desktop().window(handle=22285282)

# 根据title联结窗口,title无法联结,报错
window_zxjt = Desktop().window(title_re='中信建投网上交易卓越安全加强版V10.10 - [版面-股票买卖]')
window_zxjt.handle
window_zxjt.class_name()
# 显示zxjt窗口的所有子窗口，使用print_control_identifiers
window_zxjt.print_control_identifiers()

# 1、将打印的数据存入dataframe数据
# 1、1 将控制台数据存入特定文件，方法一
output = StringIO()
sys.stdout = output  # 重定向标准输出到 StringIO
window_zxjt.print_control_identifiers()
sys.stdout = sys.__stdout__
window_zxjt_output = output.getvalue()
# 恢复控制台
output.close()
# 1、2 将控制台数据存入特定文件，方法二
output = StringIO()
original_stdout = sys.stdout
sys.stdout = output
window_zxjt.print_control_identifiers()
sys.stdout = original_stdout
window_zxjt_output = output.getvalue()
# print_control_identifiers 解析函数,将字符串数据转化为字典的列表
def parse_control_data(text):
    lines = text.strip().splitlines()
    # 去掉数据的表头
    lines = lines[2:]
    lines = [line for line in lines if not all(char in ' |' for char in line.strip())]
    control_data = []
    for i in range(0,len(lines),3):
        level = lines[i].count('|')  # 计算层级
        line = lines[i].replace('|', '').strip()  # 去掉 | 符号并清理空格
        start_index = line.rindex('(')
        end_index = line.rindex(')')
        # 提取括号内的内容
        coordinates = line[start_index:end_index + 1]  # 包括括号
        coordinates = coordinates.strip('()').split(', ')
        coord = [int(coord[1:])  for coord in coordinates]
        # 提取去掉前后空格的字符串
        name = line[:start_index].strip()  # 去掉前后的空格
        line1 = lines[i+1].replace('|','').strip()
        nick = eval(line1)
        line2 = lines[i+2].replace('|','').strip()
            # 构建一个结构化的字典
        structured_data = {
                'Level': level,
                'Name': name,
                'Display Name': nick,
                'Coordinates': coord,  # 转换为元组
                'Child Window': line2  # 初始值
        }
        control_data.append(structured_data)

    return control_data

# 对数据进行解析
dc_zxjt_print = parse_control_data(window_zxjt_output)

# 将解析数据转化为dataframe数据
df_zxjt_print = pd.DataFrame(dc_zxjt_print)

# 2、遍历子窗口存入dataframe数据
# 建立基础表，包含相应的字段
data = pd.DataFrame(columns=['Handle','Types','Class Name','Control Type','Name','Automation ID','Is Enablede','Is Visible','Rectangle'])

# 遍历函数，并将结果存入dataframe数据表 
def save_control_info_df(window_try,data):
    """递归打印控件及其子控件的信息"""
    temp = str(window_try.rectangle())
    temp = temp.strip('()')
    temp_li = temp.split(', ')
    temp_li = [int(i[1:]) for i in temp_li]
    # 新增的行数据
    # 要注意与之前的函数差别是在一个是字典，一个是数据表，数据表会出问题如果不加[]，所以最好用字典再统一转成dataframe
    # 遍历是递归的，如果使用字典和列表，会造成层层嵌套，所以还是用dataframe
    new_row = pd.DataFrame({
        'Handle': [window_try.handle],  # 确保这个是一个可以被识别的值
        'Types': [str(window_try)],    # 转换为字符串
        'Class Name': [window_try.class_name()], 
        'Control Type': [window_try.element_info.control_type],
        'Name':[window_try.window_text()],
        'Automation ID':[window_try.automation_id()],
        'Is Enablede':window_try.is_enabled(),
        'Is Visible':window_try.is_visible(),
        'Rectangle':[temp_li]
    })
    data = pd.concat([data, new_row], ignore_index=True)
    for child in window_try.children():
        data = save_control_info_df(child, data)
    return data

# 遍历结果生成dataframe表
df_zxjt_trans = save_control_info_df(window_zxjt, data)

# 打印格式,已经转化为list格式了
df_zxjt_print.dtypes
a = df_zxjt_trans['Rectangle'][5]

# 两个表的坐标部分重合的有多少？坐标完全重合，生成坐标列表
print_li = df_zxjt_print['Coordinates'].value_counts().reset_index()
trans_li = df_zxjt_trans['Rectangle'].value_counts().reset_index()


# 画图比较两张图
# 提取矩形的四个顶点坐标
# 根据坐标生成四个点的坐标
def extract_vertices(rectangle):
    # 将提取的字符串转换为整数
    left = int(rectangle[0])
    top = int(rectangle[1])
    right = int(rectangle[2])
    bottom = int(rectangle[3])
    # 生成四个顶点坐标
    return [
        (left, top),      # 左上角
        (right, top),     # 右上角
        (right, bottom),  # 右下角
        (left, bottom)    # 左下角
    ]

# 将矩形的坐标提取为顶点并存储为
# data['vertices'] = print_li['Rectangle'].apply(extract_vertices)
df_zxjt_print['point'] = df_zxjt_print['Coordinates'].apply(extract_vertices)
print_li['point'] = print_li['Coordinates'].apply(extract_vertices)
trans_li['point'] = trans_li['Rectangle'].apply(extract_vertices)
# 找到重要的坐标点,通过截屏的方法，来确定重要的控件
# 截取并存储到特定的路径的函数
# 截屏如果截取的是0，那么存储的时候会出问题
def screen_shot(window,li,path):
    left = max(li[0],0)
    top = max(li[1],0)
    right = li[2]
    bottom = li[3]
    width = max((right-left),10)
    high = max((bottom-top),10)
    window.set_focus()
    screenshot = pyautogui.screenshot(region=(left, top, width, high))
    screenshot.save(path)
for i in print_li.index:
    li = print_li.loc[i,"Coordinates"]
    file = ','.join(map(str,li))
    path = "d:\\zxjt_trade\\"+file+".png"
    screen_shot(window_zxjt,li,path)
# 通过多模态大模型对每张图片内容进行识别
# 找到huggingface的正确用法
import os
def search_string_in_files(folder_path, search_string):
    # 遍历文件夹
    for dirpath, dirnames, filenames in os.walk(folder_path):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            try:
                # 以读模式打开文件
                with open(file_path, 'r', encoding='utf-8') as file:
                    # 逐行读取文件内容
                    for line_number, line in enumerate(file, start=1):
                        if search_string in line:
                            print(f'找到字符串 "{search_string}" 在文件: {file_path} 第 {line_number} 行')
            except Exception as e:
                print(f'无法读取文件 {file_path}: {e}')

# 使用示例
folder_path = r'D:\script\python\deeplearning'
search_string = 'glm-4v-9b'
search_string_in_files(folder_path, search_string)
# 调用多模态模型
# 多模态,支持图片录入，所以要重新下载模型
import torch
from PIL import Image
from transformers import AutoModelForCausalLM, AutoTokenizer
device = "cuda"
tokenizer = AutoTokenizer.from_pretrained("THUDM/glm-4v-9b", trust_remote_code=True)
query = '请识别图中的内容'
image = Image.open(r"D:\zxjt_trade\225,87,614,678.png").convert('RGB')
inputs = tokenizer.apply_chat_template([{"role": "user", "image": image, "content": query}],
                                       add_generation_prompt=True, tokenize=True, return_tensors="pt",
                                       return_dict=True)  # chat mode

inputs = inputs.to(device)
model = AutoModelForCausalLM.from_pretrained(
    r"C:\Users\1\.cache\huggingface\hub\models--THUDM--glm-4v-9b\snapshots\ade85af5ed77b437edf3cf4d941116026159a618\\",
    torch_dtype=torch.bfloat16,
    low_cpu_mem_usage=True,
    trust_remote_code=True
).to(device).eval()

gen_kwargs = {"max_length": 2500, "do_sample": True, "top_k": 1}
with torch.no_grad():
    outputs = model.generate(**inputs, **gen_kwargs)
    outputs = outputs[:, inputs['input_ids'].shape[1]:]
    print(tokenizer.decode(outputs[0]))
# 将文件夹下面的所有图片进行辨认，并将结果存储在dataframe数据之中
tokenizer = AutoTokenizer.from_pretrained("THUDM/glm-4v-9b", trust_remote_code=True)
model = AutoModelForCausalLM.from_pretrained(
    r"C:\Users\1\.cache\huggingface\hub\models--THUDM--glm-4v-9b\snapshots\ade85af5ed77b437edf3cf4d941116026159a618\\",
    torch_dtype=torch.bfloat16,
    low_cpu_mem_usage=True,
    trust_remote_code=True
).to(device).eval()
png_path = r"D:\zxjt_trade"
query = '请识别图中的内容'
device = "cuda"
gen_kwargs = {"max_length": 2500, "do_sample": True, "top_k": 1}
df_ui_ai_extract = pd.DataFrame(columns=['filename','content'])
filename_li=[]
content_li=[]
for dirpath, dirnames, filenames in os.walk(png_path):
    for filename in filenames:
        file_path = os.path.join(dirpath, filename)
        filename_li.append(filename)
        image = Image.open(file_path).convert('RGB')
        inputs = tokenizer.apply_chat_template([{"role": "user", "image": image, "content": query}],
                                               add_generation_prompt=True, tokenize=True, return_tensors="pt",
                                               return_dict=True)  # chat mode

        inputs = inputs.to(device)
        with torch.no_grad():
            outputs = model.generate(**inputs, **gen_kwargs)
            outputs = outputs[:, inputs['input_ids'].shape[1]:]
            print(tokenizer.decode(outputs[0]))
            content_li.append(tokenizer.decode(outputs[0]))
# 将所有的横坐标点，放入一个列表
x_li = [point[i] for point in print_li['Coordinates'] for i in (0,2)]

# 将所有的纵坐标点，放入一个列表
y_li = [point[i] for point in print_li['Coordinates'] for i in (1,3)]

# 将列表中的数字去重。排序
x_li_sorted = sorted(set(x_li))
y_li_sorted = sorted(set(y_li))
# 匹配数字的函数，找到有特定坐标点的所有信息
temp = df_zxjt_print[df_zxjt_print['Coordinates'].apply(lambda x: x[0]==data or x[2]==data)]

# 成功定位，当定位信息出现负值时，意味着窗口是不可见的已经被交易自动锁屏了  
window_zxjt['CFQS_SwitchEx13'].rectangle()
# 鼠标画出边框的函数
def print_postion(window):
    button_rect = window.rectangle()
    # 获取控件的位置
    print(button_rect)
    x_center = (button_rect.left + button_rect.right) // 2  # 计算X中心
    y_center = (button_rect.top + button_rect.bottom) // 2   # 计算Y中心
    # 移动鼠标到控件的四个角
    window.set_focus()
    pyautogui.moveTo(button_rect.left, button_rect.top, duration=1)
    pyautogui.moveTo(button_rect.right, button_rect.top, duration=1)
    pyautogui.moveTo(button_rect.right, button_rect.bottom, duration=1)
    pyautogui.moveTo(button_rect.left, button_rect.bottom, duration=1)
    pyautogui.moveTo(x_center, y_center, duration=1)  # 1 秒移动到目标位置
    time.sleep(1)
    pyautogui.click()
# 对窗口进行鼠标定位，三级菜单也可以直接定位
window_zxjt.set_focus()
print_postion(window_zxjt['CFQS_SwitchEx13'])
# 不是所有的别名都能找到，这个就找不到
print_postion(window_zxjt['TreeView2'])
# 这个也没找到
print_postion(window_zxjt.child_window(class_name="SysTreeView32"))
# 不是所有的都只有一个，有的时候有两个结果，会存在两个一摸一样的信息
print_postion(window_zxjt['AfxWnd10056'])
# 汇总所有的除层数以外的数据，看数据出现的次数
# 对象不能是列表吗？
df_zxjt_print[["Name","Display Name","Coordinates","Child Window"]].value_counts()
df_zxjt_print["Display Name"].value_counts() #成功
df_zxjt_print[["Name","Child Window"]].value_counts() #成功
df_zxjt_print[["Name","Child Window"]].value_counts() #成功
df_zxjt_print[["Name","Display Name","Child Window"]].value_counts() #报错存在一个列表
value_counts = df_zxjt_print.groupby(["Name", "Display Name", "Coordinates", "Child Window"]).size() #报错
# 使用explode来处理 展开了但是记录增多了
df_exploded = df_zxjt_print.explode('Display Name')
df_exploded = df_exploded.explode('Coordinates')
# 去重的函数，但是列中有列表就不能操作，要做列表的转化，
df_unique_name = df_zxjt_print.drop_duplicates(subset=["Name","Display Name","Coordinates","Child Window"])
# 计算每个组合的计数
value_counts = df_exploded.groupby(["Name", "Display Name", "Coordinates", "Child Window"]).size().reset_index(name='Count')

#屏幕截屏
window_zxjt.set_focus()
screenshot = pyautogui.screenshot()
screenshot.save(r"d:\screenshot.png")
#通过截屏的方式
# 提取所有的顶点
all_vertices = [vertex for vertices in data['vertices'] for vertex in vertices]
# 分离 x 和 y 坐标
x_coords = [vertex[0] for vertex in all_vertices]
y_coords = [vertex[1] for vertex in all_vertices]
y_coords = [-x for x in y_coords]
import matplotlib.pyplot as plt
# 画出散点图
plt.scatter(x_coords, y_coords)
plt.title('Vertices of Rectangles')
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.grid(True)

# -*- coding: utf-8 -*-
"""
Created on Sat Apr 19 10:18:15 2025

@author: 1
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from lxml import etree
from bs4 import BeautifulSoup
import urllib
import numpy as np
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
import pandas as pd
# 初始化浏览器驱动，这里以Chrome为例
driver = webdriver.Chrome()
# 打开目标网页
driver.get('https://data.eastmoney.com/gpzy/zygd.html')
df = pd.DataFrame(columns=['序号','股票代码','股票简称','相关','股东名称','质押股份数量','质押比例','总股本比例','质押机构','质押价格','最新价格','预估平仓线','质押开始日','公告日期'])
'''
path = r"d:\stk_info_1000.xlsx"
df.to_excel(path)
df.to_csv(path)
'''
num = 1
try:
    while True:
        # 等待页面加载完成
        print(num)
        WebDriverWait(driver, 100).until(
            EC.presence_of_all_elements_located((By.TAG_NAME, 'td'))
        )
        
        # 查找所有的 <td> 标签并提取文本
        td_elements = driver.find_elements(By.TAG_NAME, 'td')
        td_texts = [td.text for td in td_elements]
        
        # 将文本数据分割成每14个为一行的数据
        data = [td_texts[i:i+14] for i in range(0, len(td_texts), 14)]
        print(len(data))
        # 创建临时 DataFrame
        df_temp = pd.DataFrame(data)
        df_temp.columns = ['序号', '股票代码', '股票简称', '相关', '股东名称', '质押股份数量', '质押比例', '总股本比例', '质押机构', '质押价格', '最新价格', '预估平仓线', '质押开始日', '公告日期']
        
        # 将临时 DataFrame 接到主 DataFrame 后面
        df = pd.concat([df, df_temp], axis=0, ignore_index=True)
        print(len(df))
        num += 1
        if num >=2000:
            break
        # 打印当前页的数据（调试用）
        # print(f"当前页数据: {df_temp}")
        
        try:
            # 等待“下一页”按钮出现，并点击它
            next_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//a[text()='下一页']"))
            )
            
            # 检查“下一页”按钮是否可点击
            if "disabled" in next_button.get_attribute("class"):
                print("‘下一页’按钮不可点击，退出循环。")
                # break
            
            # 点击“下一页”按钮
            next_button.click()
            
            # 等待当前按钮消失
            WebDriverWait(driver, 100).until(
                EC.staleness_of(next_button)  # 等待当前按钮消失
            )
            print(num,'success')
            '''
            # 等待新的页面加载完成
            WebDriverWait(driver, 100).until(
                EC.presence_of_all_elements_located((By.TAG_NAME, 'td'))
            )
            '''
        except Exception as e:
            '''
            # 如果没有找到“下一页”按钮或点击失败，则退出循环
            print("没有找到‘下一页’按钮或点击失败，退出循环。")
            print(e)
            break
            '''
            print(num,'reset')
            driver.quit()
            driver = webdriver.Chrome()
            driver.get('https://data.eastmoney.com/gpzy/zygd.html')
            
            WebDriverWait(driver, 100).until(
                EC.presence_of_all_elements_located((By.XPATH, '/html/body/div[5]/img[1]'))
            )
            window_element = driver.find_element(By.XPATH,'/html/body/div[5]/img[1]')
            window_element.click()
            WebDriverWait(driver, 100).until(
                EC.presence_of_all_elements_located((By.XPATH, '//*[@id="gotopageindex"]'))
            )
            element = driver.find_element(By.XPATH, '//*[@id="gotopageindex"]')
            element.click()
            element.clear()
            element.send_keys(str(num))
            element1 = driver.find_element(By.XPATH,'//*[@id="dataview"]/div[3]/div[2]/form/input[2]')
            element1.click()
            print(num,'reset,sucess')

finally:
    # 关闭浏览器
    # driver.quit()
    print('hao')

# 获得所有的句柄
window_handles = driver.window_handles
# 切换到新窗口
driver.switch_to.window(window_handles[0])

# 创建一个列表来存储窗口名称
window_titles = []
# 切换到每个窗口并获取其标题
for handle in window_handles:
    driver.switch_to.window(handle)
    window_title = driver.title.strip()
    window_url = driver.current_url
    window_titles.append((window_title,window_url))
window_titles_df = pd.DataFrame(window_titles,columns=['名称','链接'])

# window_handles = driver.window_handles
# 切换到新窗口
driver.switch_to.window(window_handles[1])
# 获取所有链接页面上的
links = driver.find_elements(By.TAG_NAME, 'a')

# links[30].text
# links[30].click()
# 创建一个列表来存储链接和名称
link_list = []
# 提取每个链接的 URL 和文本
for link in links:
    url = link.get_attribute('href')
    name = link.text.strip()
    if url and name:  # 确保 URL 和名称不为空
        link_list.append((url, name))
link_df = pd.DataFrame(link_list,columns=['链接','名称'])
link_temp = link_df.loc[10,'链接']
driver.get(link_temp)


'''
# 关闭浏览器
driver.quit()
'''

# 数据处理
path = r"d:\stk_info_2404.xlsx"
df = pd.read_excel(path)
# df_jg = df.groupby('质押机构')['股票代码'].nunique().reset_index()
# df_jg_sort = df_jg.sort_values(by='股票代码',ascending=False).reset_index()
# df_zxjt = df[df['质押机构']=='中信建投证券股份有限公司'].reset_index()
# df['质押股份数量'].str.rstrip('万亿').astype(float)
# df['数量'] = df['质押股份数量'].apply(lambda x: float(x[:-1]) if '万' in x else float(x[:-1])*10000)
df['数量'] = df['质押股份数量'].apply(lambda x: float(x[:-1]) if '万' in x else float(x[:-1])*10000 if '亿' in x else float(x)/10000)
df['市值'] = df[['数量','最新价格','质押价格']].apply(lambda row:row[0]*float(row[2])/10000 if '-' in row[1] else row[0]*float(row[1])/10000,axis=1)
df['最新维持担保比例'] = df[['质押价格','最新价格','预估平仓线']].apply(lambda row:float(row[1])/float(row[2]) if '-' not in row[1] and '-' not in row[2] else float(row[0])/float(row[2]) if '-' not in row[2] else 1,axis=1)
df['初始维持担保比例'] = df[['质押价格','预估平仓线']].apply(lambda row:float(row[0])/float(row[1]) if '-' not in str(row[1]) else 1,axis=1)
# df[df['最新价格'].apply(lambda x:'-' in x)]
# df[df['预估平仓线'].apply(lambda x:'-' in x)]
# df[df['质押价格'].apply(lambda x:'-' in x)]
# df[df['质押股份数量'].rstrip(['万','亿']).astype(float)]
# df.dtypes
# a = df[df['股票简称']=='和远气体']
df['年'] = df['质押开始日'].apply(lambda x:x[:4])
df_year_sum = df.groupby('年')['市值'].sum().round().reset_index()
df_2024 = df[df['年']=='2024']
df['类型'] = df['质押机构'].apply(lambda x:'证券' if '证券' in x else '银行' if '银行' in x else '信托' if '信托' in x else '其他')

df_year_sum_type = df.groupby(['年','类型'])['市值'].sum().round().reset_index()

df.to_excel(r"d:\stk_info_2404_1.xlsx")

a = '1027万'
a.rstrip('万亿')
num = df.loc[10,'质押股份数量']
num
float(num[:-1])
